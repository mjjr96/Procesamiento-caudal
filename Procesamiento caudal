library(readxl)
library(ggplot2)
library(data.table)
library(lubridate)
library(tidyverse)
a<-read_xlsx("C:/Users/Mateo/Desktop/zq1.xlsx") #abre archivo de todos los datos de caudal procesados
n<-nrow(a)
a$Date<- as.POSIXct(a$Date,tz="GMT", format("%Y-%m-%d %H:%M"))
a[n,1] #cual es la ultima fecha procesada 

raw<-read.csv("zq1.csv", header=F, sep = ",") #Carga valores sin procesar

raw<-raw[-c(1:23),-c(1,5:11)]
nam<-raw[1,]
colnames(raw)<-nam
raw<-raw[-c(1),] #Prepara df para procesar
raw$`Date / Time`<- as.POSIXct(raw$`Date / Time`,tz="GMT", format("%d-%m-%Y %H:%M:%S"))
b1<-0.59;b2<-0.592;B<-b1+b2;Av<-0.2988;Aporte<-0.2;CDt<-1.235; CDr<-1.77;H<-14.8 
#CDt=CD_triangular; #CDr=CD_rectangular; #H=Altura_de_vertice #Av=Altura_de_vertedero; #Aporte=Area_de_aporte_al_vertedero_Km2
#son los valores unicos para cada uno de los vertederos
proc<-raw
proc$`Pressure (cm H2O)`<-as.numeric(proc$`Pressure (cm H2O)`)
proc$`Temperature (°C)`<-as.numeric(proc$`Temperature (°C)`) #Pasa a formato numerico para poder operar con las columnas
proc$nivel<-proc$`Pressure (cm H2O)`-H #Caluclo de nivel (Altura de agua en seccion sobre placa metalica)
proc$`nivel (m)`<-proc$nivel/100 #Pasa nivel de cm a m
for(i in 1:nrow(proc)){
  if (proc$`nivel (m)`[i]<= Av){
    proc$caudal[i]<-1000*(CDt*(proc$`nivel (m)`[i])^2.5)
  } 
  else{
    proc$caudal[i]<-1000*((CDt*((proc$`nivel (m)`[i])^2.5-(proc$`nivel (m)`[i]-Av)^2.5)+(CDr*B*(proc$`nivel (m)`[i]-Av)^1.5)))
  }} 
#determina si se sobrepaso el vertedero, si no ha sido sobrepasado usa la formula de vertedero triangular, en caso que a sido sobrepasado calcula una parte
#con la formula de vertedero triangular y la parte superior (lo sobrepasado) con formula de vertedero rectangular
proc$`caudal especifico`<-proc$caudal*Aporte
#Pocesamiento para obtener datos de precipitacion y ralizar comprobancion mediante grafico
pre<-read.csv("C:/Users/Mateo/Desktop/Comprobacion de datos caudal/PO1305042022.csv", header = F, sep=",") #carga valores de precipitacion 
pre<-pre[-c(1),-c(4:8)]
pre<-pre[,-c(1)]
nam<-c("Date","Evento")
colnames(pre)<-nam
pre<-pre[-c(1),] #Prepara el df para que se pueda operar con el mismo
pre$Date<-as.POSIXct(pre$Date,tz="GMT", format("%d/%m/%y %H:%M"))
pre$Evento<-as.numeric(pre$Evento)
pre$Date<-lubridate::round_date(pre$Date,"5 minutes")
# pre$Date[nrow(pre)]<-lubridate::round_date(pre$Date[nrow(pre)],"5 minutes")
date<-as.data.frame(seq(as.POSIXct(pre$Date[1], tz="GMT"), as.POSIXct(pre$Date[nrow(pre)],tz="GMT"), by="05 min"))
colnames(date)<-"TIME"
colnames(pre)<-c("TIMESTAMP","Evento")
df05min<-left_join(date, pre, by=c("TIME" = "TIMESTAMP"))
for(i in nrow(df05min):2){
  df05min$Evento[i]<-df05min$Evento[i]-df05min$Evento[i-1]
}
for(i in 2:nrow(df05min)){
  if(df05min$TIME[i] == df05min$TIME[i+1]){
    df05min$TIME[i]<-df05min$TIME[i+1]
    df05min$Evento[i]<-df05min$Evento[i]+df05min$Evento[i+1]
    df05min[i+1,]<-NULL
  }
}
